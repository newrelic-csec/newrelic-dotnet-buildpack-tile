---
name: new-relic-dotnet-buildpack
version: 1.1.13
metadata_version: 2.0
label: New Relic Dotnet Buildpack for Tanzu
description: New Relic Dotnet Buildpack for Tanzu
icon_file: resources/images/NR_logo.png

stemcell_criteria:
  os: 'ubuntu-jammy'
  version: '1.181'

forms:
- name: buildpack-selection-properties
  label: New Relic Buildpack Selection
  description: Select which buildpack extensions to install 
  properties:


  # -----------------------------------------------------------------------------
  # -----------------------------------------------------------------------------

  # --------------------------------------------------------
  # jammy
  - name: install_nr_dotnetcore_extension_jammy
    type: boolean
    label: Dotnet Core Extension (Ubuntu Jammy)?
    configurable: true
    default: true
    description: Install New Relic Dotnet Core Extension Buildpack for Ubuntu Jammy Stemcells (y/n)


  # jammy cached
  - name: install_nr_dotnetcore_extension_jammy_cached
    type: boolean
    label: Dotnet Core Cached Extension (Ubuntu Jammy)?
    configurable: true
    default: true
    description: Install New Relic Dotnet Core Cached Extension Buildpack for Ubuntu Jammy Stemcells (y/n)


  # --------------------------------------------------------
  # windows
  - name: install_nr_hwc_extension_windows
    type: boolean
    label: Dotnet Framework Extension (Windows 2019)?
    configurable: true
    default: true
    description: Install New Relic Dotnet Framework Extension Buildpack for Windows 2019 Stemcells (y/n)


  # windows cached
  - name: install_nr_hwc_extension_windows_cached
    type: boolean
    label: Dotnet Framework Cached Extension (Windows 2019)?
    configurable: true
    default: true
    description: Install New Relic Dotnet Framework Cached Extension Buildpack for Windows 2019 Stemcells (y/n)


packages:
# dotnet core extensions - ubuntu jammy
- name: nr_dotnetcore_extension_jammy_cflinuxfs3
  buildpack_order: 31
  type: buildpack
  label: New Relic Dotnet Core Extension Buildpack for ubuntu jammy
  path: './core-extension/newrelic-dotnetcore-extension_buildpack-cflinuxfs3-v1.1.13.zip'
  pre_deploy: |

    function delete_nr_anystack_buildpacks() {
      $CF buildpacks | egrep -w "^nr_dotnetcore_extension_(_cached)?|^nr_hwc_extension(_cached)?" | awk '
          NF == 5 { system("cf delete-buildpack -f " $1) }
        '
    }

    function remove_buildpack() {
      BP_NAME=${1}
      export BP_STACK=${2}

      echo "removing buildpack ${BP_NAME} stack ${BP_STACK} if it exists..."
      $CF buildpacks | grep -w "^${BP_NAME}" | awk '
          ( NF == 6 && $6 == ENVIRON["BP_STACK"] ) {
            system("cf delete-buildpack -f " $1 " -s " $6)
            if (retval == 0) {
              printf("bp %s - stack %s removed.\n", $1, $6)
            }
          }
        '
    }

    function rename_anystack_buildpack() {
      BP_NAME=${1}
      # if buildpack without stack is found rename it
      echo "searching for ${BP_NAME} for any-stack buildpacks and ranaming them if any exists..."
      $CF buildpacks | grep -w "^${BP_NAME}" |  awk '
          NF == 5 { 
            newBuildpackName = sprintf("%s_any_stack", $1)
            system("cf rename-buildpack " $1 "  " newBuildpackName)
          }
        '
    }

    function add_buildpack() {
      BP_NAME=${1}
      BP_FILE=${2}
      BP_ORDER=${3}
      BP_STACK=${4}

      $CF buildpacks | grep -w "^${BP_NAME}" | grep -w " ${STACK}" >/dev/null
      if [ "$?" -eq "0" ]; then
        echo "updating buildpack ${BP_NAME} stack ${BP_STACK}..."
        $CF update-buildpack ${BP_NAME} -p ${BP_FILE} -s ${STACK} --enable
      else
        echo "creating buildpack ${BP_NAME} stack ${BP_STACK}..."
        $CF create-buildpack ${BP_NAME} ${BP_FILE} ${BP_ORDER} --enable
      fi
    }
    ### --------------------------------------------------


  post_deploy: |
    output=`$CF apps | tail -1`
    if [ "$output" == "No apps found" ]; then
      cf delete-space -f $CF_SPACE
    fi

    output=`$CF spaces | tail -1`
    if [ "$output" == "No spaces found" ]; then
      cf delete-org -f $CF_ORG
    fi
    ### --------------------------------------------------


  deploy: |
    # clean up any NR buildpacks with no stacks
    delete_nr_anystack_buildpacks

    BUILDPACK_NAME="nr_dotnetcore_extension"
    STACK=cflinuxfs4
    if [ ${INSTALL_NR_DOTNETCORE_EXTENSION_JAMMY} == true ]
    then
      BUILDPACK_ORDER=<%= Shellwords.escape properties.nr_dotnetcore_extension_jammy_cflinuxfs3.buildpack_order %>
      PKG_NAME=<%= Shellwords.escape properties.nr_dotnetcore_extension_jammy_cflinuxfs3.name %>
      BUILDPACK_FILE=${PACKAGE_PATH}/${PKG_NAME}/newrelic-dotnetcore-extension_buildpack-cflinuxfs3-v1.1.13.zip

      #----
      echo "PKG_NAME: ${PKG_NAME}"
      echo "BUILDPACK_NAME: ${BUILDPACK_NAME}"
      echo "BUILDPACK_ORDER: ${BUILDPACK_ORDER}"
      echo "BUILDPACK_FILE: ${BUILDPACK_FILE}"
      echo "STACK: ${STACK}"
      #--------

      add_buildpack ${BUILDPACK_NAME} ${BUILDPACK_FILE} ${BUILDPACK_ORDER} ${STACK}
    else
      remove_buildpack ${BUILDPACK_NAME} ${STACK}
    fi
    ### --------------------------------------------------


  delete: |
    ### delete the buildpacks
    cf delete-buildpack -f nr_dotnetcore_extension -s cflinuxfs4
    ### --------------------------------------------------
    


- name: nr_dotnetcore_extension_jammy_cflinuxfs3_cached
  buildpack_order: 32
  type: buildpack
  label: New Relic Dotnet Core Extension Buildpack for ubuntu jammy (Cached)
  path: './core-extension/newrelic-dotnetcore-extension_buildpack-cached-cflinuxfs3-v1.1.13.zip'
  deploy: |
    BUILDPACK_NAME="nr_dotnetcore_extension_cached"
    STACK=cflinuxfs4
    if [ ${INSTALL_NR_DOTNETCORE_EXTENSION_JAMMY_CACHED} == true ]
    then
      BUILDPACK_ORDER=<%= Shellwords.escape properties.nr_dotnetcore_extension_jammy_cflinuxfs3_cached.buildpack_order %>
      PKG_NAME=<%= Shellwords.escape properties.nr_dotnetcore_extension_jammy_cflinuxfs3_cached.name %>
      BUILDPACK_FILE=${PACKAGE_PATH}/${PKG_NAME}/newrelic-dotnetcore-extension_buildpack-cached-cflinuxfs3-v1.1.13.zip

      #----
      echo "PKG_NAME: ${PKG_NAME}"
      echo "BUILDPACK_NAME: ${BUILDPACK_NAME}"
      echo "BUILDPACK_ORDER: ${BUILDPACK_ORDER}"
      echo "BUILDPACK_FILE: ${BUILDPACK_FILE}"
      echo "STACK: ${STACK}"
      #--------

      add_buildpack ${BUILDPACK_NAME} ${BUILDPACK_FILE} ${BUILDPACK_ORDER} ${STACK}
    else
      remove_buildpack ${BUILDPACK_NAME} ${STACK}
    fi
    ### --------------------------------------------------


  delete: |
    ### delete the buildpacks
    cf delete-buildpack -f nr_dotnetcore_extension_cached -s cflinuxfs4
    ### --------------------------------------------------
  
  

- name: nr_dotnetcore_extension_jammy_cflinuxfs4
  buildpack_order: 31
  type: buildpack
  label: New Relic Dotnet Core Extension Buildpack for ubuntu jammy
  path: './core-extension/newrelic-dotnetcore-extension_buildpack-cflinuxfs4-v1.1.13.zip'
  pre_deploy: |

    function delete_nr_anystack_buildpacks() {
      $CF buildpacks | egrep -w "^nr_dotnetcore_extension(_cached)?|^nr_hwc_extension(_cached)?" | awk '
          NF == 5 { system("cf delete-buildpack -f " $1) }
        '
    }

    function remove_buildpack() {
      BP_NAME=${1}
      export BP_STACK=${2}

      echo "removing buildpack ${BP_NAME} stack ${BP_STACK} if it exists..."
      $CF buildpacks | grep -w "^${BP_NAME}" | awk '
          ( NF == 6 && $6 == ENVIRON["BP_STACK"] ) {
            system("cf delete-buildpack -f " $1 " -s " $6)
            if (retval == 0) {
              printf("bp %s - stack %s removed.\n", $1, $6)
            }
          }
        '
    }

    function rename_anystack_buildpack() {
      BP_NAME=${1}
      # if buildpack without stack is found rename it
      echo "searching for ${BP_NAME} for any-stack buildpacks and ranaming them if any exists..."
      $CF buildpacks | grep -w "^${BP_NAME}" |  awk '
          NF == 5 { 
            newBuildpackName = sprintf("%s_any_stack", $1)
            system("cf rename-buildpack " $1 "  " newBuildpackName)
          }
        '
    }

    function add_buildpack() {
      BP_NAME=${1}
      BP_FILE=${2}
      BP_ORDER=${3}
      BP_STACK=${4}

      $CF buildpacks | grep -w "^${BP_NAME}" | grep -w " ${STACK}" >/dev/null
      if [ "$?" -eq "0" ]; then
        echo "updating buildpack ${BP_NAME} stack ${BP_STACK}..."
        $CF update-buildpack ${BP_NAME} -p ${BP_FILE} -s ${STACK} --enable
      else
        echo "creating buildpack ${BP_NAME} stack ${BP_STACK}..."
        $CF create-buildpack ${BP_NAME} ${BP_FILE} ${BP_ORDER} --enable
      fi
    }
    ### --------------------------------------------------


  post_deploy: |
    output=`$CF apps | tail -1`
    if [ "$output" == "No apps found" ]; then
      cf delete-space -f $CF_SPACE
    fi

    output=`$CF spaces | tail -1`
    if [ "$output" == "No spaces found" ]; then
      cf delete-org -f $CF_ORG
    fi
    ### --------------------------------------------------


  deploy: |
    # clean up any NR buildpacks with no stacks
    delete_nr_anystack_buildpacks

    BUILDPACK_NAME="nr_dotnetcore_extension"
    STACK=cflinuxfs4
    if [ ${INSTALL_NR_DOTNETCORE_EXTENSION_JAMMY} == true ]
    then
      BUILDPACK_ORDER=<%= Shellwords.escape properties.nr_dotnetcore_extension_jammy_cflinuxfs4.buildpack_order %>
      PKG_NAME=<%= Shellwords.escape properties.nr_dotnetcore_extension_jammy_cflinuxfs4.name %>
      BUILDPACK_FILE=${PACKAGE_PATH}/${PKG_NAME}/newrelic-dotnetcore-extension_buildpack-cflinuxfs4-v1.1.13.zip

      #----
      echo "PKG_NAME: ${PKG_NAME}"
      echo "BUILDPACK_NAME: ${BUILDPACK_NAME}"
      echo "BUILDPACK_ORDER: ${BUILDPACK_ORDER}"
      echo "BUILDPACK_FILE: ${BUILDPACK_FILE}"
      echo "STACK: ${STACK}"
      #--------

      add_buildpack ${BUILDPACK_NAME} ${BUILDPACK_FILE} ${BUILDPACK_ORDER} ${STACK}
    else
      remove_buildpack ${BUILDPACK_NAME} ${STACK}
    fi
    ### --------------------------------------------------


  delete: |
    ### delete the buildpacks
    cf delete-buildpack -f nr_dotnetcore_extension -s cflinuxfs4
    ### --------------------------------------------------


- name: nr_dotnetcore_extension_jammy_cflinuxfs4_cached
  buildpack_order: 32
  type: buildpack
  label: New Relic Dotnet Core Extension Buildpack for ubuntu jammy (Cached)
  path: './core-extension/newrelic-dotnetcore-extension_buildpack-cached-cflinuxfs4-v1.1.13.zip'
  deploy: |
    BUILDPACK_NAME="nr_dotnetcore_extension_cached"
    STACK=cflinuxfs4
    if [ ${INSTALL_NR_DOTNETCORE_EXTENSION_JAMMY_CACHED} == true ]
    then
      BUILDPACK_ORDER=<%= Shellwords.escape properties.nr_dotnetcore_extension_jammy_cflinuxfs4_cached.buildpack_order %>
      PKG_NAME=<%= Shellwords.escape properties.nr_dotnetcore_extension_jammy_cflinuxfs4_cached.name %>
      BUILDPACK_FILE=${PACKAGE_PATH}/${PKG_NAME}/newrelic-dotnetcore-extension_buildpack-cached-cflinuxfs4-v1.1.13.zip

      #----
      echo "PKG_NAME: ${PKG_NAME}"
      echo "BUILDPACK_NAME: ${BUILDPACK_NAME}"
      echo "BUILDPACK_ORDER: ${BUILDPACK_ORDER}"
      echo "BUILDPACK_FILE: ${BUILDPACK_FILE}"
      echo "STACK: ${STACK}"
      #--------

      add_buildpack ${BUILDPACK_NAME} ${BUILDPACK_FILE} ${BUILDPACK_ORDER} ${STACK}
    else
      remove_buildpack ${BUILDPACK_NAME} ${STACK}
    fi
    ### --------------------------------------------------


  delete: |
    ### delete the buildpacks
    cf delete-buildpack -f nr_dotnetcore_extension_cached -s cflinuxfs4
    ### --------------------------------------------------


# hwc extensions - windows 2019
- name: nr_hwc_extension_windows
  buildpack_order: 33
  type: buildpack
  label: New Relic HWC Extension Buildpack for Windows 2019
  path: './hwc-extension/newrelic-hwc-extension_buildpack-windows-v1.1.13.zip'
  deploy: |
    BUILDPACK_NAME="nr_hwc_extension"
    STACK=windows
    if [ ${INSTALL_NR_HWC_EXTENSION_WINDOWS} == true ]
    then
      BUILDPACK_ORDER=<%= Shellwords.escape properties.nr_hwc_extension_windows.buildpack_order %>
      PKG_NAME=<%= Shellwords.escape properties.nr_hwc_extension_windows.name %>
      BUILDPACK_FILE=${PACKAGE_PATH}/${PKG_NAME}/newrelic-hwc-extension_buildpack-windows-v1.1.13.zip

      #----
      echo "PKG_NAME: ${PKG_NAME}"
      echo "BUILDPACK_NAME: ${BUILDPACK_NAME}"
      echo "BUILDPACK_ORDER: ${BUILDPACK_ORDER}"
      echo "BUILDPACK_FILE: ${BUILDPACK_FILE}"
      echo "STACK: ${STACK}"
      #--------

      add_buildpack ${BUILDPACK_NAME} ${BUILDPACK_FILE} ${BUILDPACK_ORDER} ${STACK}
    else
      remove_buildpack ${BUILDPACK_NAME} ${STACK}
    fi
    ### --------------------------------------------------


  delete: |
    ### delete the buildpacks
    cf delete-buildpack -f nr_hwc_extension -s windows
    ### --------------------------------------------------


- name: nr_hwc_extension_windows_cached
  buildpack_order: 34
  type: buildpack
  label: New Relic HWC Extension Buildpack for Windows 2019 (Cached)
  path: './hwc-extension/newrelic-hwc-extension_buildpack-cached-windows-v1.1.13.zip'
  deploy: |
    BUILDPACK_NAME="nr_hwc_extension_cached"
    STACK=windows
    if [ ${INSTALL_NR_HWC_EXTENSION_WINDOWS_CACHED} == true ]
    then
      BUILDPACK_ORDER=<%= Shellwords.escape properties.nr_hwc_extension_windows_cached.buildpack_order %>
      PKG_NAME=<%= Shellwords.escape properties.nr_hwc_extension_windows_cached.name %>
      BUILDPACK_FILE=${PACKAGE_PATH}/${PKG_NAME}/newrelic-hwc-extension_buildpack-cached-windows-v1.1.13.zip

      #----
      echo "PKG_NAME: ${PKG_NAME}"
      echo "BUILDPACK_NAME: ${BUILDPACK_NAME}"
      echo "BUILDPACK_ORDER: ${BUILDPACK_ORDER}"
      echo "BUILDPACK_FILE: ${BUILDPACK_FILE}"
      echo "STACK: ${STACK}"
      #--------

      add_buildpack ${BUILDPACK_NAME} ${BUILDPACK_FILE} ${BUILDPACK_ORDER} ${STACK}
    else
      remove_buildpack ${BUILDPACK_NAME} ${STACK}
    fi
    ### --------------------------------------------------


  delete: |
    ### delete the buildpacks
    cf delete-buildpack -f nr_hwc_extension_cached -s windows
    ### --------------------------------------------------

